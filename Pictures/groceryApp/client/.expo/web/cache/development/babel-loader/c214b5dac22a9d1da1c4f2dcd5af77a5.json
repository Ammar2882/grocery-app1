{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/amuizz/Desktop/groceryApp/groceryApp/client/screens/admin/History.js\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport \"../../global\";\nimport store from \"./store\";\nexport default function History(props) {\n  var _this = this;\n\n  var _useState = useState({\n    arrayData: '',\n    jarName: props.route.params.key,\n    dateTimeArr: \"\",\n    loading: true,\n    edit: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var jarName = props.route.params.key;\n  useEffect(function () {\n    props.navigation.addListener(\"blur\", function () {\n      console.log(\"blurred\");\n    });\n    props.navigation.addListener(\"focus\", function () {\n      console.log(\"focused history\");\n      console.log(\"JarName: \" + jarName);\n    });\n    fetchData();\n    setState(_extends(state, {\n      loading: false\n    }));\n  }, []);\n  store.subscribe(function () {\n    jarName = props.route.params.key;\n    fetchData();\n  });\n\n  var fetchData = function fetchData() {\n    setState(_extends(state, {\n      loading: true\n    }));\n    fetch(global.ipAddress + \":3001/history/\" + jarName).then(function (res) {\n      return res.json();\n    }).then(function (resJson) {\n      console.log(resJson);\n      var values = resJson.status;\n      setState(_extends(state, {\n        arrayData: [].concat(_toConsumableArray(state.arrayData), [{\n          value: values,\n          dateTime: new Date()\n        }])\n      }));\n      console.log(\"Array data is \" + JSON.stringify(state.arrayData));\n      setState(_extends(state, {\n        loading: false\n      }));\n    }).catch(function (e) {\n      return console.log(e);\n    });\n  };\n\n  var getValues = function getValues(val) {\n    if (val >= 0 && val <= 10) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      }, \"high\");\n    } else if (val >= 11 && val <= 16) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 14\n        }\n      }, \"Medium\");\n    } else if (val >= 17) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }\n      }, \"low\");\n    }\n  };\n\n  var getDateTime = function getDateTime(dt) {\n    var dateTime = dt.toUTCString();\n    return React.createElement(Text, {\n      style: styles.dateStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    }, dateTime);\n  };\n\n  var handleRefresh = function handleRefresh() {\n    setState(_extends(state, {\n      loading: false\n    }));\n    fetchData();\n    setState(_extends(state, {\n      loading: true\n    }));\n  };\n\n  var renderSeparator = function renderSeparator() {\n    return React.createElement(View, {\n      style: {\n        marginBottom: -10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return React.createElement(FlatList, {\n    data: state.arrayData,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableOpacity, {\n        style: styles.card,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.jarNameContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 19\n        }\n      }, React.createElement(Text, {\n        style: styles.jarText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, jarName), getDateTime(item.dateTime), React.createElement(View, {\n        style: styles.pill,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, getValues(item.value))));\n    },\n    ItemSeparatorComponent: renderSeparator,\n    keyExtractor: function keyExtractor(item, index) {\n      return index.toString();\n    },\n    refreshing: state.loading,\n    onRefresh: handleRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    backgroundColor: \"#f2f2f2\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  card: {\n    width: \"95%\",\n    height: 80,\n    backgroundColor: \"#fff\",\n    borderRadius: 5,\n    elevation: 5,\n    margin: 10\n  },\n  pill: {\n    flex: 2,\n    backgroundColor: \"lightgreen\",\n    padding: 5,\n    borderRadius: 5,\n    maxWidth: 65,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginRight: 20\n  },\n  dateStyle: {\n    flex: 3,\n    fontSize: 12,\n    color: \"#777\",\n    marginLeft: 15,\n    marginTop: 3\n  },\n  jarNameContainer: {\n    flexDirection: \"row\",\n    marginVertical: 30\n  },\n  jarText: {\n    flex: 0.6,\n    marginLeft: 20,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["/home/amuizz/Desktop/groceryApp/groceryApp/client/screens/admin/History.js"],"names":["React","Component","useEffect","useState","store","History","props","arrayData","jarName","route","params","key","dateTimeArr","loading","edit","state","setState","navigation","addListener","console","log","fetchData","subscribe","fetch","global","ipAddress","then","res","json","resJson","values","status","value","dateTime","Date","JSON","stringify","catch","e","getValues","val","getDateTime","dt","toUTCString","styles","dateStyle","handleRefresh","renderSeparator","marginBottom","item","card","jarNameContainer","jarText","pill","index","toString","StyleSheet","create","container","flex","alignItems","backgroundColor","width","height","borderRadius","elevation","margin","padding","maxWidth","display","justifyContent","marginRight","fontSize","color","marginLeft","marginTop","flexDirection","marginVertical","fontWeight"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  FlatList,\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport \"../../global\";\r\nimport store from \"./store\";\r\n\r\nexport default function History(props) {\r\n  // jarName = this.props.route.params.key;\r\n  const [state,setState] = useState({\r\n    arrayData: '',\r\n    jarName: props.route.params.key,\r\n    dateTimeArr: \"\",\r\n    loading: true,\r\n    edit: false,\r\n  })\r\n    var jarName = props.route.params.key;\r\n  useEffect(() => {\r\n\r\n    props.navigation.addListener(\"blur\", () => {\r\n      console.log(\"blurred\");\r\n\r\n    });\r\n    props.navigation.addListener(\"focus\", () => {\r\n      console.log(\"focused history\");\r\n      console.log(\"JarName: \" + jarName);\r\n    });\r\n   fetchData();\r\n   setState(Object.assign(state,{ loading: false }));\r\n\r\n  },[])\r\n  store.subscribe(() => {\r\n    jarName = props.route.params.key;\r\n    fetchData();\r\n  })\r\n\r\n  const fetchData = () => {\r\n    setState(Object.assign(state,{ loading: true }));\r\n    fetch(`${global.ipAddress}:3001/history/` + jarName)\r\n        .then((res) => res.json())\r\n        .then((resJson) => {\r\n          console.log(resJson);\r\n          var values = resJson.status;\r\n          setState(Object.assign(state,{\r\n            arrayData: [\r\n                ...state.arrayData,\r\n              { value: values, dateTime: new Date() },\r\n            ],\r\n          }));\r\n          console.log(\"Array data is \"+JSON.stringify(state.arrayData))\r\n          setState(Object.assign(state,{ loading: false }));\r\n        })\r\n        .catch((e) => console.log(e));\r\n  };\r\n\r\n  const getValues = (val) => {\r\n    if (val >= 0 && val <= 10) {\r\n      return <Text>high</Text>;\r\n    } else if (val >= 11 && val <= 16) {\r\n      return <Text>Medium</Text>;\r\n    } else if (val >= 17) {\r\n      return <Text>low</Text>;\r\n    }\r\n  };\r\n\r\n  const getDateTime = (dt) => {\r\n    const dateTime = dt.toUTCString();\r\n    return <Text style={styles.dateStyle}>{dateTime}</Text>;\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n\r\n    setState(Object.assign(state,{ loading: false }))\r\n    fetchData();\r\n    setState(Object.assign(state,{ loading: true }));\r\n  };\r\n\r\n  const renderSeparator = () => (\r\n      <View\r\n          style={{\r\n            marginBottom: -10,\r\n          }}\r\n      />\r\n  );\r\n\r\n\r\n    return (\r\n        <FlatList\r\n            data={state.arrayData}\r\n            renderItem={({ item }) => (\r\n                <TouchableOpacity style={styles.card}>\r\n                  <View style={styles.jarNameContainer}>\r\n                    <Text style={styles.jarText}>{jarName}</Text>\r\n                    {getDateTime(item.dateTime)}\r\n                    <View style={styles.pill}>{getValues(item.value)}</View>\r\n                  </View>\r\n                </TouchableOpacity>\r\n            )}\r\n            ItemSeparatorComponent={renderSeparator}\r\n            keyExtractor={(item, index) => index.toString()}\r\n            refreshing={state.loading}\r\n            onRefresh={handleRefresh}\r\n        />\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#f2f2f2\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  card: {\r\n    width: \"95%\",\r\n    height: 80,\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 5,\r\n    elevation: 5,\r\n    margin: 10,\r\n  },\r\n  pill: {\r\n    flex: 2,\r\n    backgroundColor: \"lightgreen\",\r\n    padding: 5,\r\n    borderRadius: 5,\r\n    maxWidth: 65,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginRight: 20,\r\n  },\r\n  dateStyle: {\r\n    flex: 3,\r\n    fontSize: 12,\r\n    color: \"#777\",\r\n    marginLeft: 15,\r\n    marginTop: 3,\r\n  },\r\n  jarNameContainer: { flexDirection: \"row\", marginVertical: 30 },\r\n  jarText: { flex: 0.6, marginLeft: 20, fontWeight: \"bold\" },\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   StyleSheet,\r\n//   FlatList,\r\n//   View,\r\n//   Text,\r\n//   TouchableOpacity,\r\n// } from \"react-native\";\r\n// import store from \"./store\";\r\n// import \"../../global\";\r\n//\r\n// const History = (props) => {\r\n//\r\n//   var jarName = props.route.params.key;\r\n//\r\n//   const [arrayData, setarrayData] = useState(\"\");\r\n//   const [dateTimeArr, setdateTimeArr] = useState(\"\");\r\n//   const [loading, setloading] = useState(true);\r\n//   const [edit, setedit] = useState(false);\r\n//\r\n//   store.subscribe(() => {\r\n//     jarName = props.route.params.key;\r\n//     fetchData();\r\n//   })\r\n//   useEffect(() => fetchData(), []);\r\n//\r\n//   const fetchData = () => {\r\n//     setloading(true);\r\n//     fetch(`${global.ipAddress}:3001/history/` + jarName)\r\n//       .then((res) => res.json())\r\n//       .then((resJson) => {\r\n//         console.log(resJson);\r\n//         var values = resJson.status;\r\n//         setarrayData(...arrayData, { value: values, dateTime: new Date() });\r\n//         // this.setState({\r\n//         //   arrayData: [\r\n//         //     ...this.state.arrayData,\r\n//         //     { value: values, dateTime: new Date() },\r\n//         //   ],\r\n//         // });\r\n//         setloading(false);\r\n//       })\r\n//       .catch((e) => console.log(e));\r\n//   };\r\n//\r\n//   const getValues = (val) => {\r\n//     if (val >= 0 && val <= 10) {\r\n//       return <Text>high</Text>;\r\n//     } else if (val >= 11 && val <= 16) {\r\n//       return <Text>Medium</Text>;\r\n//     } else if (val >= 17) {\r\n//       return <Text>low</Text>;\r\n//     }\r\n//   };\r\n//\r\n//   const getDateTime = (dt) => {\r\n//     const dateTime = dt.toUTCString();\r\n//     return <Text style={styles.dateStyle}>{dateTime}</Text>;\r\n//   };\r\n//\r\n//   const handleRefresh = () => {\r\n//     setloading(false);\r\n//     fetchData();\r\n//     setloading(true);\r\n//   };\r\n//\r\n//   const renderSeparator = () => (\r\n//     <View\r\n//       style={{\r\n//         marginBottom: -10,\r\n//       }}\r\n//     />\r\n//   );\r\n//\r\n//   return (\r\n//     <FlatList\r\n//       data={arrayData}\r\n//       renderItem={({ item }) => (\r\n//         <TouchableOpacity style={styles.card}>\r\n//           <View style={styles.jarNameContainer}>\r\n//             <Text style={styles.jarText}>{jarName}</Text>\r\n//             {this.getDateTime(item.dateTime)}\r\n//             <View style={styles.pill}>{getValues(item.value)}</View>\r\n//           </View>\r\n//         </TouchableOpacity>\r\n//       )}\r\n//       ItemSeparatorComponent={renderSeparator}\r\n//       keyExtractor={(item, index) => index.toString()}\r\n//       refreshing={loading}\r\n//       onRefresh={handleRefresh}\r\n//     />\r\n//   );\r\n// };\r\n//\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     alignItems: \"center\",\r\n//     backgroundColor: \"#f2f2f2\",\r\n//     width: \"100%\",\r\n//     height: \"100%\",\r\n//   },\r\n//   card: {\r\n//     width: \"95%\",\r\n//     height: 80,\r\n//     backgroundColor: \"#fff\",\r\n//     borderRadius: 5,\r\n//     elevation: 5,\r\n//     margin: 10,\r\n//   },\r\n//   pill: {\r\n//     flex: 2,\r\n//     backgroundColor: \"lightgreen\",\r\n//     padding: 5,\r\n//     borderRadius: 5,\r\n//     maxWidth: 65,\r\n//     display: \"flex\",\r\n//     justifyContent: \"center\",\r\n//     alignItems: \"center\",\r\n//     marginRight: 20,\r\n//   },\r\n//   dateStyle: {\r\n//     flex: 3,\r\n//     fontSize: 12,\r\n//     color: \"#777\",\r\n//     marginLeft: 15,\r\n//     marginTop: 3,\r\n//   },\r\n//   jarNameContainer: { flexDirection: \"row\", marginVertical: 30 },\r\n//   jarText: { flex: 0.6, marginLeft: 20, fontWeight: \"bold\" },\r\n// });\r\n//\r\n// export default History;\r\n"]},"metadata":{},"sourceType":"module"}